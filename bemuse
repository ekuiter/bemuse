#!/bin/bash
set -e

USAGE="usage: $0 [--directory=<directory>] [--state=<state>] [--width=<px>] [--height=<px>] [--framerate=<fps>] [--chroma=<ffmpeg-input>] [--colorkey=<ffmpeg-colorkey>] [--scale=<ffmpeg-scale>] [--overlay=<ffmpeg-overlay>] [--filter=<ffmpeg-filter>] [--fade=<sec>] [--audio-offset=<sec>] [--video-offset=<sec>] [--duration=<sec>] [--thumbnail-from=<sec>] [--thumbnail-to=<sec>] [--thumbnail-convert=<convert-options>] [--sheethost-metadata=<metadata>] [--sheethost-username=<username>] [--sheethost-password=<password>] [--skip-video] [--visualize] [--keep] <score>"
WIDTH=1920
HEIGHT=1080
FRAMERATE=60
AUDIO_OFFSET=3.5
VIDEO_OFFSET=0
FADE=3
COLORKEY=0x000000:0.2:0.2
OVERLAY=W/2-w/2:H/2-h/2

die() { echo "$*" >&2; exit 2; }
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

while getopts :-: OPT; do
  if [ "$OPT" = "-" ]; then
    OPT="${OPTARG%%=*}"
    OPTARG="${OPTARG#$OPT}"
    OPTARG="${OPTARG#=}"
  fi
  case "$OPT" in
    directory )          needs_arg; DIRECTORY="$OPTARG" ;;
    state )              needs_arg; STATE="$OPTARG" ;;
    width )              needs_arg; WIDTH="$OPTARG" ;;
    height )             needs_arg; HEIGHT="$OPTARG" ;;
    framerate )          needs_arg; FRAMERATE="$OPTARG" ;;
    chroma )             needs_arg; CHROMA="$OPTARG" ;;
    colorkey )           needs_arg; COLORKEY="$OPTARG" ;;
    scale )              needs_arg; SCALE="$OPTARG" ;;
    overlay )            needs_arg; OVERLAY="$OPTARG" ;;
    filter )             needs_arg; FILTER="$OPTARG" ;;
    fade )               needs_arg; FADE="$OPTARG" ;;
    audio-offset )       needs_arg; AUDIO_OFFSET="$OPTARG" ;;
    video-offset )       needs_arg; VIDEO_OFFSET="$OPTARG" ;;
    duration )           needs_arg; DURATION="$OPTARG" ;;
    thumbnail-from )     needs_arg; THUMBNAIL_FROM="$OPTARG" ;;
    thumbnail-to )       needs_arg; THUMBNAIL_TO="$OPTARG" ;;
    thumbnail-convert )  needs_arg; THUMBNAIL_CONVERT="$OPTARG" ;;
    sheethost-metadata ) needs_arg; SHEETHOST_METADATA="$OPTARG" ;;
    sheethost-username ) needs_arg; SHEETHOST_USERNAME="$OPTARG" ;;
    sheethost-password ) needs_arg; SHEETHOST_PASSWORD="$OPTARG" ;;
    skip-video )         SKIP_VIDEO=true ;;
    visualize )          VISUALIZE=true ;;
    keep )               KEEP=true ;;
    ??* )                die "Illegal option --$OPT" ;;
    \? )                 die $USAGE ;;
  esac
done
shift $((OPTIND-1))
SCORE=$@

if [[ -z "$SCORE" ]];                     then die $USAGE; fi
if [[ ! -f "$SCORE" ]];                   then die "Score $SCORE does not exist."; fi
if ! command -v convert > /dev/null;      then die "ImageMagick not installed."; fi
if ! command -v jq > /dev/null;           then die "jq not installed."; fi
if command -v ffmpeg > /dev/null;         then FFMPEG=ffmpeg; fi
if command -v ffmpeg.exe > /dev/null;     then FFMPEG=ffmpeg.exe; fi
if [[ -z $FFMPEG ]];                      then die "ffmpeg not found, check PATH!"; fi
if command -v mscore > /dev/null;         then MUSESCORE=mscore; fi
if command -v musescore > /dev/null;      then MUSESCORE=musescore; fi
if command -v MuseScore3.exe > /dev/null; then MUSESCORE=MuseScore3.exe; fi
if [[ -z $MUSESCORE ]];                   then die "MuseScore not found, check PATH!"; fi

if [[ -z $DIRECTORY ]]; then
    DIR=$(dirname "$SCORE")
else
    DIR=$DIRECTORY
    mkdir -p $DIR
fi
BASE=$DIR/$(basename "$SCORE" .mscz)
SELF="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [[ ! -z $DIRECTORY ]]; then cp "$SCORE" "$BASE.mscz"; fi
if [[ -z $STATE ]]; then STATE="$BASE.state.ini"; fi
if [[ -z $SCALE ]]; then SCALE="$WIDTH:$HEIGHT"; fi
if [[ -z $THUMBNAIL_FROM ]]; then THUMBNAIL_FROM=$AUDIO_OFFSET; fi
if [[ ! -z $FILTER ]]; then FILTER=", $FILTER"; fi

# see https://github.com/ekuiter/MIDIVisualizer
if uname -r | grep -q Microsoft; then
    MIDI_VISUALIZER="$SELF/MIDIVisualizer.exe"
else
    MIDI_VISUALIZER="$SELF/MIDIVisualizer"
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.mid" ]]; then
    echo "Exporting MIDI ..."
    $MUSESCORE -o "$BASE.mid" "$BASE.mscz"
else
    echo "Keeping MIDI."
fi

if [[ ! -z $VISUALIZE ]]; then
	if [ "$STATE" = "$BASE.state.ini" ] && [ "$(realpath "$SELF")" != "$(realpath "$DIR")" ]; then
		cp "$SELF/state.ini" "$BASE.state.ini"
	fi
	$MIDI_VISUALIZER "$BASE.mid" "$STATE"
	if [ "$STATE" = "$BASE.state.ini" ] && [ "$(realpath "$SELF")" != "$(realpath "$DIR")" ]; then
		rm "$BASE.state.ini"
	fi
	exit 0
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.pdf" ]]; then
    echo "Exporting PDF ..."
    $MUSESCORE -o "$BASE.pdf" "$BASE.mscz"
else
    echo "Keeping PDF."
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.mp3" ]]; then
    echo "Exporting MP3 ..."
    $MUSESCORE -o "$BASE.tmp.mp3" "$BASE.mscz"
    $FFMPEG -y -hide_banner -i "$BASE.tmp.mp3" -af "silenceremove=start_periods=1:start_duration=0:start_threshold=0.02" "$BASE.mp3"
    rm -f "$BASE.tmp.mp3"
else
    echo "Keeping MP3."
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.jpg" ]]; then
    echo "Exporting JPG ..."
    $MUSESCORE -o "$BASE.png" "$BASE.mscz"
    FIRST_PAGE=$(ls "$BASE-"*".png" | head -n1)
    convert "$FIRST_PAGE" -resize 50% -background white -flatten "$BASE.jpg"
    rm "$BASE-"*".png"
else
    echo "Keeping JPG."
fi

if [[ -z $SKIP_VIDEO ]] && ([[ -z $KEEP ]] || [[ ! -f "$BASE.mp4" ]]); then
    echo "Exporting MP4 ..."
    if [[ -z $DURATION ]]; then
        DURATION_MP3=$($FFMPEG -i "$BASE.mp3" 2>&1 | grep Duration | cut -d" " -f4 | sed "s/,//" | sed "s@\..*@@g" | \
            awk '{ split($1, A, ":"); split(A[3], B, "."); print 3600*A[1] + 60*A[2] + B[1] }')
        DURATION=$(echo "$DURATION_MP3 + $AUDIO_OFFSET" | bc)
    fi
    if [ "$STATE" = "$BASE.state.ini" ] && [ "$(realpath "$SELF")" != "$(realpath "$DIR")" ]; then
        cp "$SELF/state.ini" "$BASE.state.ini"
    fi
    $MIDI_VISUALIZER "$BASE.mid" "$STATE" $WIDTH $HEIGHT $FRAMERATE \
        | $FFMPEG -y -hide_banner -r $FRAMERATE -f image2pipe -vcodec ppm -t $DURATION -i - -c:v libx264 -pix_fmt yuv420p -crf 0 "$BASE.tmp.mp4"
    if [ "$STATE" = "$BASE.state.ini" ] && [ "$(realpath "$SELF")" != "$(realpath "$DIR")" ]; then
        rm "$BASE.state.ini"
    fi
    if [[ ! -z $CHROMA ]]; then
        if [[ ! -z $FADE ]]; then
            FADE=", fade = type=in:duration=$FADE, fade = type=out:duration=$FADE:start_time=$(echo "$DURATION - $FADE - $VIDEO_OFFSET" | bc)"
        fi
        if [[ ! -z $VIDEO_OFFSET ]]; then
            SETPTS=", setpts = PTS+$VIDEO_OFFSET/TB"
        fi
        $FFMPEG -y -hide_banner -i "$CHROMA" -i "$BASE.tmp.mp4" -filter_complex "
            color = black:${WIDTH}x${HEIGHT}, fps = fps=$FRAMERATE, trim = duration=$DURATION [background];
            [0:v] scale = $SCALE, setsar = 1:1 $FILTER, trim = duration=$DURATION $FADE $SETPTS [chroma];
            [1:v] colorkey = $COLORKEY, trim = duration=$DURATION [keyboard];
            [background][chroma] overlay = $OVERLAY [background2];
            [background2][keyboard] overlay [out]" -map "[out]" -crf 0 "$BASE.tmp2.mp4"
    else
        cp "$BASE.tmp.mp4" "$BASE.tmp2.mp4"
    fi
    OFFSET_MS=$(echo "$AUDIO_OFFSET * 1000 / 1" | bc)
    $FFMPEG -y -hide_banner -i "$BASE.tmp2.mp4" -i "$BASE.mp3" -af "adelay=$OFFSET_MS|$OFFSET_MS" -c:a aac -crf 17 -shortest "$BASE.mp4"
    rm -f "$BASE.tmp.mp4" "$BASE.tmp2.mp4"
else
    echo "Keeping MP4."
fi

if [[ -z $SKIP_VIDEO ]] && ([[ -z $KEEP ]] || [[ ! -f "$BASE.thumbnail.jpg" ]]); then
    echo "Exporting thumbnail ..."
    if [[ ! -z $THUMBNAIL_TO ]]; then
        THUMBNAIL_TO="-t $THUMBNAIL_TO"
    fi
    $FFMPEG -y -hide_banner -ss $THUMBNAIL_FROM $THUMBNAIL_TO -i "$BASE.mp4" -vf thumbnail -frames:v 1 "$BASE.thumbnail.jpg"
    convert "$BASE.thumbnail.jpg" $THUMBNAIL_CONVERT "$BASE.thumbnail.jpg"
else
    echo "Keeping thumbnail."
fi

if [[ ! -z $SHEETHOST_METADATA ]] && [[ ! -z $SHEETHOST_USERNAME ]] && [[ ! -z $SHEETHOST_PASSWORD ]]; then
    echo "Uploading to Sheethost ..."
    if [[ -f $SHEETHOST_METADATA ]]; then
        source "$SHEETHOST_METADATA"
    fi
    if [[ -z $TITLE ]] || [[ -z $COMPOSER ]] || [[ -z $INSTRUMENTS ]]; then
        echo "Could not find sheet metadata, skipping upload."
        # sheet metadata should set the following variables:
        # TITLE="Song Title"
        # SOURCE_TITLE="Where's it from?"
        # COMPOSER="Composer(s)"
        # CREATOR_NAME="Arranger/Transcriber"
        # ARTIST="Original Artist/Performer"
        # COPYRIGHT="Copyright Year & Name"
        # DESCRIPTION="Description"
        # TAGS="" # comma-separated list of tags
        # TYPE_ID=1 # arrangement, 2 = official release, 3 = original work, 4 = transcription, 5 = other
        # CATEGORY_ID=1 # video game
        # INSTRUMENTS=57 # piano
        # PAGES=1 # number of pages
        # DIFFICULTY=1 # 1 = easy, 2 = moderate, 3 = intermediate, 4 = proficient, 5 = advanced, 6 = insane
        # PRIVACY_STATUS=1 # 1 = public, 2 = unlisted, 3 = private
    else
        if [[ -z $PAGES ]]; then
            PAGES=$(strings < "$BASE.pdf" | sed -n "s|.*/Count -\{0,1\}\([0-9]\{1,\}\).*|\1|p" | sort -rn | head -n1)
        fi
        RES=$(curl -c "$BASE.session" \
            --data-urlencode "login=$SHEETHOST_USERNAME" \
            --data-urlencode "password=$SHEETHOST_PASSWORD" \
            https://sheet.host/account/login)
        trap 'rm -f "$BASE.session"' EXIT
        if [[ ! -z $RES ]]; then
            echo "Could not log in to Sheethost, skipping upload."
        else
            echo "Creating sheet ..."
            RES=$(curl -X PUT -b "$BASE.session" -H "X-Requested-With: XMLHttpRequest" \
                --data-urlencode "title=$TITLE" \
                --data-urlencode "source_title=$SOURCE_TITLE" \
                --data-urlencode "composer=$COMPOSER" \
                --data-urlencode "creator_name=$CREATOR_NAME" \
                --data-urlencode "artist=$ARTIST" \
                --data-urlencode "copyright=$COPYRIGHT" \
                --data-urlencode "description=$DESCRIPTION" \
                --data-urlencode "tags=$TAGS" \
                --data-urlencode "type_id=$TYPE_ID" \
                --data-urlencode "category_id=$CATEGORY_ID" \
                --data-urlencode "instruments[]=$INSTRUMENTS" \
                --data-urlencode "pages=$PAGES" \
                --data-urlencode "difficulty=$DIFFICULTY" \
                --data-urlencode "privacy_status=$PRIVACY_STATUS" \
                https://sheet.host/api/score/resource)
            echo $RES
            ID=$(echo $RES | jq -r '.sheet.id')
            HASH=$(echo $RES | jq -r '.sheet.hash')

            upload_file() {
                echo "Uploading $1 ..."
                curl -F "files[]=@$1" -b "$BASE.session" -H "X-Requested-With: XMLHttpRequest" https://sheet.host/api/score/file//$ID
                echo
            }

            upload_file "$BASE.jpg"
            upload_file "$BASE.pdf"
            upload_file "$BASE.mid"
            upload_file "$BASE.mscz"

            echo "Publishing sheet ..."
            curl -b "$BASE.session" -H "X-Requested-With: XMLHttpRequest" \
                --data-urlencode "id=$ID" \
                --data-urlencode "notify_followers=0" \
                https://sheet.host/api/score/publish

            echo
            echo "Sheet published at: https://sheet.host/sheet/$HASH"
        fi
    fi
else
    echo "Skipping Sheethost upload."
fi

echo "Done."
