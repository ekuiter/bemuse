#!/bin/bash
set -e

USAGE="usage: $0 [--state=<state>] [--width=<px>] [--height=<px>] [--framerate=<fps>] [--chroma=<ffmpeg-input>] [--colorkey=<ffmpeg-colorkey>] [--scale=<ffmpeg-scale>] [--overlay=<ffmpeg-overlay>] [[--filter=<ffmpeg-filter>]] [--offset=<sec>] [--visualize] [--keep] <score>"
WIDTH=1920
HEIGHT=1080
FRAMERATE=60
OFFSET=3
COLORKEY=0x000000:0.1:0.2
OVERLAY=W/2-w/2:H/2-h/2

die() { echo "$*" >&2; exit 2; }
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

while getopts :-: OPT; do
  if [ "$OPT" = "-" ]; then
    OPT="${OPTARG%%=*}"
    OPTARG="${OPTARG#$OPT}"
    OPTARG="${OPTARG#=}"
  fi
  case "$OPT" in
    state )     needs_arg; STATE="$OPTARG" ;;
    width )     needs_arg; WIDTH="$OPTARG" ;;
    height )    needs_arg; HEIGHT="$OPTARG" ;;
    framerate ) needs_arg; FRAMERATE="$OPTARG" ;;
    chroma )    needs_arg; CHROMA="$OPTARG" ;;
    colorkey )  needs_arg; COLORKEY="$OPTARG" ;;
    scale )     needs_arg; SCALE="$OPTARG" ;;
    overlay )   needs_arg; OVERLAY="$OPTARG" ;;
    filter )   needs_arg; FILTER="$OPTARG" ;;
    offset )    needs_arg; OFFSET="$OPTARG" ;;
    visualize ) VISUALIZE=true ;;
    keep )      KEEP=true ;;
    ??* )       die "Illegal option --$OPT" ;;
    \? )        die $USAGE ;;
  esac
done
shift $((OPTIND-1))
SCORE=$@

if [[ -z "$SCORE" ]];                     then die $USAGE; fi
if [[ ! -f "$SCORE" ]];                   then die "Score $SCORE does not exist."; fi
if ! command -v convert > /dev/null;      then die "ImageMagick not installed."; fi
if command -v ffmpeg > /dev/null;         then FFMPEG=ffmpeg; fi
if command -v ffmpeg.exe > /dev/null;     then FFMPEG=ffmpeg.exe; fi
if [[ -z $FFMPEG ]];                      then die "ffmpeg not found, check PATH!"; fi
if command -v mscore > /dev/null;         then MUSESCORE=mscore; fi
if command -v musescore > /dev/null;      then MUSESCORE=musescore; fi
if command -v MuseScore3.exe > /dev/null; then MUSESCORE=MuseScore3.exe; fi
if [[ -z $MUSESCORE ]];                   then die "MuseScore not found, check PATH!"; fi

DIR=$(dirname "$SCORE")
BASE=$DIR/$(basename "$SCORE" .mscz)
SELF="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [[ -z $STATE ]]; then STATE="$DIR/state.ini"; fi
if [[ -z $SCALE ]]; then SCALE="$WIDTH:$HEIGHT"; fi
if [[ ! -z $FILTER ]]; then FILTER=", $FILTER"; fi

# see https://github.com/ekuiter/MIDIVisualizer
if uname -r | grep -q Microsoft; then
    MIDI_VISUALIZER="$SELF/MIDIVisualizer.exe"
else
    MIDI_VISUALIZER="$SELF/MIDIVisualizer"
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.mid" ]]; then
    echo "Exporting MIDI ..."
    $MUSESCORE -o "$BASE.mid" "$SCORE"
else
    echo "Keeping MIDI."
fi

if [[ ! -z $VISUALIZE ]]; then
	if [ "$STATE" = "$DIR/state.ini" ] && [ "$(realpath $SELF)" != "$(realpath $DIR)" ]; then
		cp "$SELF/state.ini" "$DIR/state.ini"
	fi
	$MIDI_VISUALIZER "$BASE.mid" "$STATE"
	if [ "$STATE" = "$DIR/state.ini" ] && [ "$(realpath $SELF)" != "$(realpath $DIR)" ]; then
		rm "$DIR/state.ini"
	fi
	exit 0
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.pdf" ]]; then
    echo "Exporting PDF ..."
    $MUSESCORE -o "$BASE.pdf" "$SCORE"
else
    echo "Keeping PDF."
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.mp3" ]]; then
    echo "Exporting MP3 ..."
    $MUSESCORE -o "$DIR/tmp.mp3" "$SCORE"
    $FFMPEG -y -hide_banner -i "$DIR/tmp.mp3" -af "silenceremove=start_periods=1:start_duration=0:start_threshold=0.02" "$BASE.mp3"
    rm -f "$DIR/tmp.mp3"
else
    echo "Keeping MP3."
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.jpg" ]]; then
    echo "Exporting JPG ..."
    $MUSESCORE -o "$BASE.png" "$SCORE"
    FIRST_PAGE=$(ls "$BASE-"*".png" | head -n1)
    convert "$FIRST_PAGE" -resize 50% -background white -flatten "$BASE.jpg"
    rm "$BASE-"*".png"
else
    echo "Keeping JPG."
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.mp4" ]]; then
    echo "Exporting MP4 ..."
    if [ "$STATE" = "$DIR/state.ini" ] && [ "$(realpath $SELF)" != "$(realpath $DIR)" ]; then
        cp "$SELF/state.ini" "$DIR/state.ini"
    fi
    $MIDI_VISUALIZER "$BASE.mid" "$STATE" $WIDTH $HEIGHT $FRAMERATE \
        | $FFMPEG -y -hide_banner -r $FRAMERATE -f image2pipe -vcodec ppm -i - -c:v libx264 -pix_fmt yuv420p -crf 0 "$DIR/tmp.mp4"
    if [ "$STATE" = "$DIR/state.ini" ] && [ "$(realpath $SELF)" != "$(realpath $DIR)" ]; then
        rm "$DIR/state.ini"
    fi
    if [[ ! -z $CHROMA ]]; then
        DURATION=$($FFMPEG -i "$DIR/tmp.mp4" 2>&1 | grep Duration | cut -d" " -f4 | sed "s/,//" | sed "s@\..*@@g" | \
            awk '{ split($1, A, ":"); split(A[3], B, "."); print 3600*A[1] + 60*A[2] + B[1] }')
        $FFMPEG -y -hide_banner -i "$CHROMA" -i "$DIR/tmp.mp4" -filter_complex "
            color = black:${WIDTH}x${HEIGHT}, trim = duration=$DURATION [background];
            [0:v] scale = $SCALE, setsar = 1:1, trim = duration=$DURATION $FILTER [chroma];
            [1:v] colorkey = $COLORKEY [keyboard];
            [background][chroma] overlay = $OVERLAY [background2];
            [background2][keyboard] overlay [out]" -map "[out]" -r $FRAMERATE -crf 0 "$DIR/tmp2.mp4"
    else
        cp "$DIR/tmp.mp4" "$DIR/tmp2.mp4"
    fi
    OFFSET_MS=$(echo "$OFFSET * 1000 / 1" | bc)
    $FFMPEG -y -hide_banner -i "$DIR/tmp2.mp4" -i "$BASE.mp3" -af "adelay=$OFFSET_MS|$OFFSET_MS" -c:a aac -shortest "$BASE.mp4"
    rm -f "$DIR/tmp.mp4" "$DIR/tmp2.mp4"
else
    echo "Keeping MP4."
fi

if [[ -z $KEEP ]] || [[ ! -f "$BASE.thumb.jpg" ]]; then
    echo "Exporting thumbnail ..."
    $FFMPEG -y -hide_banner -ss $OFFSET -i "$BASE.mp4" -vf thumbnail -frames:v 1 "$BASE.thumb.jpg"
else
    echo "Keeping thumbnail."
fi

echo "Done."
